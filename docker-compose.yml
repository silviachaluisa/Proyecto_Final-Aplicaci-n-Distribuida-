services:
  # Contenedor de la base de datos (MySQL)
  mysql-master1:
    image: mysql:8.0
    container_name: mysql_maestro1
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: instamessage_db
    ports:
      - "3306:3306"
    volumes:
      - dbmaster_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 20s
      retries: 10
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --server-id=1 --log-bin=mysql-bin --binlog-do-db=replica 
    networks:
      - my_network

  mysql-master2:
    image: mysql:8.0
    container_name: mysql_esclavo
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: instamessage_db
    volumes:
      - dbslave_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 20s
      retries: 10
    command: --default-authentication-plugin=mysql_native_password --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --server-id=2 --relay-log=mysql-relay-bin --log-bin=mysql-bin --binlog-do-db=replica --read-only=ON
    networks:
      - my_network

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: phpmyadmin_m
    ports:
      - "8081:80"
    environment:
      - PMA_HOSTS=mysql-master1,mysql-master2  # Correcci√≥n: sin comillas dobles
      - PMA_ARBITRARY=1
    networks:
      - my_network

  node-server:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: node_server
    ports:
      - "3000:3000"
    networks:
      - my_network
    depends_on:
      - mysql-master1
      - mysql-master2
    volumes:
      - ./app:/app  # Evita que sobrescriba node_modules
      - /app/node_modules  # Se asegura de que no se monte la carpeta del host

  node_server2: # Replica del mismo servidor
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: node_server2
    ports:
      - "3001:3000"
    networks:
      - my_network
    depends_on:
      - mysql-master1
      - mysql-master2
    volumes:
      - ./app:/app
      - /app/node_modules

  node_server3: # Replica del mismo servidor
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: node_server3
    ports:
      - "3002:3000"
    networks:
      - my_network
    depends_on:
      - mysql-master1
      - mysql-master2
    volumes:
      - ./app:/app
      - /app/node_modules

  # Balanceador de carga
  nginx:
    image: nginx:latest
    container_name: nginx_lb
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Asegurar la ruta correcta
    depends_on:
      - node-server
      - node_server2
      - node_server3
    networks:
      - my_network

volumes:
  dbmaster_data:
  dbslave_data:

networks:
  my_network:
    driver: bridge
